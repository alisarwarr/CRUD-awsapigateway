"use strict";
//AWS
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || '';
exports.handler = async (event = {}) => {
    if (event.path === "/books"
        && event.resource === "/books"
        && event.httpMethod === "GET") {
        try {
            const params = {
                TableName: TABLE_NAME
            };
            const response = await docClient.scan(params).promise();
            return { statusCode: 200, body: JSON.stringify(response.Items) };
        }
        catch (err) {
            console.log("DynamoDB error: ", err);
            return { statusCode: 500, body: err };
        }
    }
    else if (event.path === "/books"
        && event.resource === "/books"
        && event.httpMethod === "POST") {
        if (!event.body) {
            return {
                statusCode: 400,
                body: "invalid request, you are missing the parameter body"
            };
        }
        const item = typeof event.body == "object" ? event.body : JSON.parse(event.body);
        try {
            const params = {
                TableName: TABLE_NAME,
                Item: item
            };
            await docClient.put(params).promise();
            return { statusCode: 201, body: "" };
        }
        catch (err) {
            console.log("DynamoDB error: ", err);
            return { statusCode: 500, body: err };
        }
    }
    else if (event.path === "/book"
        && event.resource === "/{id}"
        && event.httpMethod === "GET") {
        if (!event.queryStringParameters.id) {
            return {
                statusCode: 400,
                body: "Error: You are missing the path parameter id"
            };
        }
        try {
            const params = {
                TableName: TABLE_NAME,
                Key: {
                    id: event.queryStringParameters.id
                }
            };
            const response = await docClient.get(params).promise();
            return { statusCode: 200, body: JSON.stringify(response.Item) };
        }
        catch (err) {
            console.log("DynamoDB error: ", err);
            console.log("sdas6", event);
            return { statusCode: 500, body: err };
        }
    }
    else if (event.path === "/book"
        && event.resource === "/{id}"
        && event.httpMethod === "DELETE") {
        if (!event.queryStringParameters.id) {
            return {
                statusCode: 400,
                body: "Error: You are missing the path parameter id"
            };
        }
        try {
            const params = {
                TableName: TABLE_NAME,
                Key: {
                    id: event.queryStringParameters.id
                }
            };
            await docClient.delete(params).promise();
            return { statusCode: 200, body: "" };
        }
        catch (err) {
            console.log("DynamoDB error: ", err);
            return { statusCode: 500, body: err };
        }
    }
    else if (event.resource === "/book"
        && event.resource === "/{id}"
        && event.httpMethod === "PATCH") {
        if (!event.body) {
            return {
                statusCode: 400,
                body: "invalid request, you are missing the parameter body",
            };
        }
        if (!event.queryStringParameters.id) {
            return {
                statusCode: 400,
                body: "invalid request, you are missing the path parameter id",
            };
        }
        const editedItem = typeof event.body == "object" ? event.body : JSON.parse(event.body);
        const editedItemProperties = Object.keys(editedItem);
        if (!editedItem || editedItemProperties.length < 1) {
            return { statusCode: 400, body: "invalid request, no arguments provided" };
        }
        const firstProperty = editedItemProperties.splice(0, 1);
        const params = {
            TableName: TABLE_NAME,
            Key: {
                id: event.queryStringParameters.id,
            },
            UpdateExpression: `set ${firstProperty} = :${firstProperty}`,
            ExpressionAttributeValues: {},
            ReturnValues: "UPDATED_NEW",
        };
        params.ExpressionAttributeValues[`:${firstProperty}`] =
            editedItem[`${firstProperty}`];
        editedItemProperties.forEach((property) => {
            params.UpdateExpression += `, ${property} = :${property}`;
            params.ExpressionAttributeValues[`:${property}`] = editedItem[property];
        });
        try {
            await docClient.update(params).promise();
            return { statusCode: 204, body: "" };
        }
        catch (err) {
            console.log("DynamoDB error: ", err);
            return { statusCode: 500, body: err };
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsS0FBSztBQUNMLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDcEQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBR2hELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBRXRELElBQ0ksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRO1dBQ3ZCLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUTtXQUMzQixLQUFLLENBQUMsVUFBVSxLQUFLLEtBQUssRUFDNUI7UUFDRSxJQUFJO1lBQ0EsTUFBTSxNQUFNLEdBQUc7Z0JBQ1gsU0FBUyxFQUFFLFVBQVU7YUFDeEIsQ0FBQztZQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztTQUNwRTtRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDekM7S0FDSjtTQUVJLElBQ0QsS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRO1dBQ3ZCLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUTtXQUMzQixLQUFLLENBQUMsVUFB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Q2hCLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLEdBQUcsRUFBRTtnQkFDRCxFQUFFLEVBQUUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7YUFDckM7WUFDRCxnQkFBZ0IsRUFBRSxPQUFPLGFBQWEsT0FBTyxhQUFhLEVBQUU7WUFDNUQseUJBQXlCLEVBQUUsRUFBRTtZQUM3QixZQUFZLEVBQUUsYUFBYTtTQUM5QixDQUFDO1FBQ0YsTUFBTSxDQUFDLHlCQUF5QixDQUFDLElBQUksYUFBYSxFQUFFLENBQUM7WUFDakQsVUFBVSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUVuQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUN0QyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxRQUFRLE9BQU8sUUFBUSxFQUFFLENBQUM7WUFDMUQsTUFBTSxDQUFDLHlCQUF5QixDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFDLENBQUM7UUFHSCxJQUFJO1lBQ0EsTUFBTSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUN4QztRQUNELE9BQU8sR0FBRyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDekM7S0FDSjtBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vQVdTXG5jb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5jb25zdCBUQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSB8fCAnJztcblxuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+ID0+IHtcblxuICAgIGlmIChcbiAgICAgICAgZXZlbnQucGF0aCA9PT0gXCIvYm9va3NcIlxuICAgICAmJiBldmVudC5yZXNvdXJjZSA9PT0gXCIvYm9va3NcIlxuICAgICAmJiBldmVudC5odHRwTWV0aG9kID09PSBcIkdFVFwiXG4gICAgKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGRvY0NsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogMjAwLCBib2R5OiBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5JdGVtcykgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmIChcbiAgICAgICAgZXZlbnQucGF0aCA9PT0gXCIvYm9va3NcIlxuICAgICAmJiBldmVudC5yZXNvdXJjZSA9PT0gXCIvYm9va3NcIlxuICAgICAmJiBldmVudC5odHRwTWV0aG9kID09PSBcIlBPU1RcIlxuICAgICkge1xuICAgICAgICBpZiAoIWV2ZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IFwiaW52YWxpZCByZXF1ZXN0LCB5b3UgYXJlIG1pc3NpbmcgdGhlIHBhcmFtZXRlciBib2R5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpdGVtID0gdHlwZW9mIGV2ZW50LmJvZHkgPT0gXCJvYmplY3RcIiA/IGV2ZW50LmJvZHkgOiBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgVGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuICAgICAgICAgICAgICAgIEl0ZW06IGl0ZW1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGF3YWl0IGRvY0NsaWVudC5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDEsIGJvZHk6IFwiXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmIChcbiAgICAgICAgZXZlbnQucGF0aCA9PT0gXCIvYm9va1wiXG4gICAgICYmIGV2ZW50LnJlc291cmNlID09PSBcIi97aWR9XCJcbiAgICAgJiYgZXZlbnQuaHR0cE1ldGhvZCA9PT0gXCJHRVRcIlxuICAgICkge1xuICAgICAgICBpZiAoIWV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgICAgICAgICAgYm9keTogXCJFcnJvcjogWW91IGFyZSBtaXNzaW5nIHRoZSBwYXRoIHBhcmFtZXRlciBpZFwiXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMuaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGRvY0NsaWVudC5nZXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLkl0ZW0pIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiBlcnJvcjogXCIsIGVycik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNkYXM2XCIsIGV2ZW50KVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBlcnIgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVsc2UgaWYgKFxuICAgICAgICBldmVudC5wYXRoID09PSBcIi9ib29rXCJcbiAgICAgJiYgZXZlbnQucmVzb3VyY2UgPT09IFwiL3tpZH1cIlxuICAgICAmJiBldmVudC5odHRwTWV0aG9kID09PSBcIkRFTEVURVwiXG4gICAgKSB7XG4gICAgICAgIGlmICghZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgICAgICBib2R5OiBcIkVycm9yOiBZb3UgYXJlIG1pc3NpbmcgdGhlIHBhdGggcGFyYW1ldGVyIGlkXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICAgICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycy5pZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGF3YWl0IGRvY0NsaWVudC5kZWxldGUocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IFwiXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmIChcbiAgICAgICAgZXZlbnQucmVzb3VyY2UgPT09IFwiL2Jvb2tcIlxuICAgICAmJiBldmVudC5yZXNvdXJjZSA9PT0gXCIve2lkfVwiXG4gICAgICYmIGV2ZW50Lmh0dHBNZXRob2QgPT09IFwiUEFUQ0hcIlxuICAgICkge1xuICAgICAgICBpZiAoIWV2ZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IFwiaW52YWxpZCByZXF1ZXN0LCB5b3UgYXJlIG1pc3NpbmcgdGhlIHBhcmFtZXRlciBib2R5XCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMuaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IFwiaW52YWxpZCByZXF1ZXN0LCB5b3UgYXJlIG1pc3NpbmcgdGhlIHBhdGggcGFyYW1ldGVyIGlkXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZWRpdGVkSXRlbSA9IHR5cGVvZiBldmVudC5ib2R5ID09IFwib2JqZWN0XCIgPyBldmVudC5ib2R5IDogSlNPTi5wYXJzZShldmVudC5ib2R5KTtcbiAgICAgICAgY29uc3QgZWRpdGVkSXRlbVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhlZGl0ZWRJdGVtKTtcbiAgICAgICAgaWYgKCFlZGl0ZWRJdGVtIHx8IGVkaXRlZEl0ZW1Qcm9wZXJ0aWVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogXCJpbnZhbGlkIHJlcXVlc3QsIG5vIGFyZ3VtZW50cyBwcm92aWRlZFwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaXJzdFByb3BlcnR5ID0gZWRpdGVkSXRlbVByb3BlcnRpZXMuc3BsaWNlKDAsIDEpO1xuICAgICAgICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogVEFCTEVfTkFNRSxcbiAgICAgICAgICAgIEtleToge1xuICAgICAgICAgICAgICAgIGlkOiBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnMuaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgVXBkYXRlRXhwcmVzc2lvbjogYHNldCAke2ZpcnN0UHJvcGVydHl9ID0gOiR7Zmlyc3RQcm9wZXJ0eX1gLFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgICAgICAgICBSZXR1cm5WYWx1ZXM6IFwiVVBEQVRFRF9ORVdcIixcbiAgICAgICAgfTtcbiAgICAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNbYDoke2ZpcnN0UHJvcGVydHl9YF0gPVxuICAgICAgICAgICAgZWRpdGVkSXRlbVtgJHtmaXJzdFByb3BlcnR5fWBdO1xuXG4gICAgICAgIGVkaXRlZEl0ZW1Qcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgICAgICAgICBwYXJhbXMuVXBkYXRlRXhwcmVzc2lvbiArPSBgLCAke3Byb3BlcnR5fSA9IDoke3Byb3BlcnR5fWA7XG4gICAgICAgICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1tgOiR7cHJvcGVydHl9YF0gPSBlZGl0ZWRJdGVtW3Byb3BlcnR5XTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwNCwgYm9keTogXCJcIiB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRHluYW1vREIgZXJyb3I6IFwiLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzQ29kZTogNTAwLCBib2R5OiBlcnIgfTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=